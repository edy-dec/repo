#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


//ID, NumărZileÎmprumut, PretCarte, Titlu, NumeCititor, CodSectiune

struct StructuraCarte
{
	int id;
	int nrZile;
	float pret;
	char* titlu;
	char* numeCititor;
	unsigned char serie;
};
typedef struct StructuraCarte Carte;

//structura Heap
struct Heap {
	int lungime;
	Carte* vector;
	int nrCarti;
};
typedef struct Heap Heap;

Carte citireCarteDinFisier(FILE* file)
{
	char buffer[100];
	char sep[3] = ",\n";
	fgets(buffer, 100, file);
	char* aux;
	Carte c1;
	aux = strtok(buffer, sep);
	c1.id = atoi(aux);
	c1.nrZile = atoi(strtok(NULL, sep));
	c1.pret = atof(strtok(NULL, sep));
	aux = strtok(NULL, sep);
	c1.titlu = malloc(strlen(aux) + 1);
	strcpy_s(c1.titlu, strlen(aux) + 1, aux);
	aux = strtok(NULL, sep);
	c1.numeCititor = malloc(strlen(aux) + 1);
	strcpy_s(c1.numeCititor, strlen(aux) + 1, aux);
	c1.serie = *strtok(NULL, sep);


	return c1;
}

void afisareCarte(Carte carte)
{
	printf("ID: %d\n", carte.id);
	printf("Nr. zile: %d\n", carte.nrZile);
	printf("PRET: %.2f\n", carte.pret);
	printf("Titlu: %s\n", carte.titlu);
	printf("Nume Cititor: %s\n", carte.numeCititor);
	printf("Serie: %c\n", carte.serie);

}

Heap intializareHeap(int lungime)
{
	Heap heap;
	heap.lungime = lungime;
	heap.nrCarti = 0;
	heap.vector = (Carte*)malloc(sizeof(Carte) * lungime);
	return heap;

}

void filtreazaHeap(Heap heap, int pozNod)
{
	int pozFiuSt = 2 * pozNod + 1;
	int pozFiuDr = 2 * pozNod + 2;
	int pozMax = pozNod;
	if (pozFiuSt < heap.nrCarti && heap.vector[pozMax].pret < heap.vector[pozFiuSt].pret)
	{
		pozMax = pozFiuSt;
	}
	if (pozFiuDr < heap.nrCarti && heap.vector[pozMax].pret < heap.vector[pozFiuDr].pret)
	{
		pozMax = pozFiuDr;
	}
	if (pozMax != pozNod)
	{
		Carte aux = heap.vector[pozMax];
		heap.vector[pozMax] = heap.vector[pozNod];
		heap.vector[pozNod] = aux;
		if (pozMax <= (heap.nrCarti - 2) / 2)
		{
			filtreazaHeap(heap, pozMax);
		}

	}
}


Heap citireHeapDinFisier(const char* f)
{
		
	FILE* file = fopen(f, "r");
	Heap heap = intializareHeap(10);
	while (!feof(file))
	{
		heap.vector[heap.nrCarti++] = citireCarteDinFisier(file);
	}
	fclose(file);
	for (int i = (heap.nrCarti - 2) / 2; i >= 0; i--)
	{
		filtreazaHeap(heap, i);
	}
	return heap;
}

void afisareHeap(Heap heap)
{
	for (int i =0; i < heap.nrCarti; i++)
	{
		afisareCarte(heap.vector[i]);
	}

}

void afisareHeapAscuns(Heap heap)
{
	for (int i = heap.nrCarti; i < heap.lungime; i++)
	{
		afisareCarte(heap.vector[i]);
	}

}


Carte extrageCarte(Heap* heap)
{

	if (heap->nrCarti > 0)
	{
		Carte aux = heap->vector[0];
		heap->vector[0] = heap->vector[heap->nrCarti - 1];
		heap->vector[heap->nrCarti - 1] = aux;
		heap->nrCarti--;

		for (int i = (heap->nrCarti - 2) / 2; i >= 0; i--)
		{
			filtreazaHeap(*heap, i);
		}
		return aux;

	}
}
	
void dezalocareHeap(Heap* heap)
{
	for (int i = 0; i < heap->lungime; i++)
	{
		free(heap->vector[i].titlu);
		free(heap->vector[i].numeCititor);

	}
	free(heap->vector);
	heap->vector = NULL;
	heap->lungime = 0;
	heap->nrCarti = 0;
}



int main() {

	
	Heap heap = citireHeapDinFisier("carti.txt");

	afisareHeap(heap);
	afisareCarte(extrageCarte(&heap));
	afisareHeapAscuns(heap);
	dezalocareHeap(&heap);
	
	
	
	
	return 0;
}
